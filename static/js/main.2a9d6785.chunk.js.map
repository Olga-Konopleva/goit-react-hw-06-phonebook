{"version":3,"sources":["redux/contacts/contacts-action.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","deleteContact","filterContacts","Form","styled","form","Button","button","Span","span","Label","label","ContactForm","dispatch","useDispatch","useState","setName","setNumber","onSubmit","e","preventDefault","type","value","pattern","title","required","onChange","target","Li","li","ContactItem","useSelector","state","contacts","items","find","contact","getContacts","onClick","Ul","ul","getFilterContacts","normalizedFilter","filter","toLowerCase","item","includes","ContactList","map","Filter","connect","className","itemsReducer","createReducer","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.2a9d6785.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nexport const addContact = createAction('contact/Add', (name, number) => ({\n  payload: { id: uuidv4(), name, number },\n}));\n\nexport const deleteContact = createAction('contact/Delete');\n\nexport const filterContacts = createAction('contact/Filter');\n\n//Pure Redux\n// export const addContact = (name, number) => ({\n//   type: actionTypes.ADD,\n//   payload: { id: uuidv4(), name, number },\n// });\n\n// export const deleteContact = id => ({\n//   type: actionTypes.DELETE,\n//   payload: id,\n// });\n\n// export const filterContacts = value => ({\n//   type: actionTypes.FILTER,\n//   payload: value,\n// });\n","import React, { useState } from 'react';\n// import { v4 as uuidv4 } from 'uuid';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-action';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 6px;\n  border: 2px solid green;\n  color: green;\n  width: 200px;\n  margin-left: 1em;\n  padding: 0.25em 1em;\n  &:hover {\n    background: LemonChiffon;\n  }\n`;\nconst Span = styled.span`\n  margin-right: 10px;\n  display: inline-block;\n`;\n\nconst Label = styled.label`\n  margin-bottom: 15px;\n`;\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(addContact(name, number));\n    setName('');\n    setNumber('');\n  };\n\n  const handleChangeName = e => setName(e.target.value);\n  const handleChangeNumber = e => setNumber(e.target.value);\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        <Span>Name</Span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChangeName}\n        />\n      </Label>\n      <Label>\n        <Span>Number</Span>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n          required\n          onChange={handleChangeNumber}\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport { deleteContact } from '../../redux/contacts/contacts-action';\n\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 6px;\n  border: 2px solid red;\n  color: red;\n  width: 80px;\n  margin-left: 1em;\n  padding: 0.25em 1em;\n  &:hover {\n    background: LemonChiffon;\n  }\n`;\n\nconst Li = styled.li`\n  margin-bottom: 10px;\n`;\n\nconst getContacts = id => state =>\n  state.contacts.items.find(contact => contact.id === id);\n\nconst ContactItem = ({ id }) => {\n  const { name, number } = useSelector(getContacts(id));\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n  return (\n    <Li>\n      {name}: {number}\n      <Button type=\"button\" onClick={handleDelete}>\n        Delete\n      </Button>\n    </Li>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import ContactItem from './ContactItem';\nimport styled from 'styled-components';\nimport { useSelector } from 'react-redux';\n\nconst Ul = styled.ul`\n  list-style: none;\n  padding-left: 5px;\n`;\n\nconst getFilterContacts = ({ contacts: { items, filter } }) => {\n  const normalizedFilter = filter.toLowerCase();\n  return items.filter(item =>\n    item.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilterContacts);\n  return (\n    <Ul>\n      {contacts.map(({ id }) => (\n        <ContactItem key={id} id={id} />\n      ))}\n    </Ul>\n  );\n};\n\nexport default ContactList;\n","import { useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/contacts-action';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const handleChangeFilter = e => dispatch(filterContacts(e.target.value));\n\n  return (\n    <div>\n      <p>Find contacts by name</p>\n      <input type=\"text\" onChange={handleChangeFilter} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default connect()(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { addContact, deleteContact, filterContacts } from './contacts-action';\n\nconst itemsReducer = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) =>\n    state.filter(item => item.id !== payload),\n});\n\nconst filterReducer = createReducer('', {\n  [filterContacts]: (_, { payload }) => payload,\n});\n// const itemsReducer = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.ADD:\n//       return [...state, payload];\n//     case actionTypes.DELETE:\n//       return state.filter(item => item.id !== payload);\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case actionTypes.FILTER:\n//       return payload;\n//     default:\n//       return state;\n//   }\n// };\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import {\n  combineReducers,\n  configureStore,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n// import { combineReducers, createStore } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n];\n\nconst persistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(persistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\n//Pure Redux\n// const rootReducer = combineReducers({\n//     contacts: contactsReducer,\n//   });\n// const store = createStore(rootReducer, composeWithDevTools());\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}